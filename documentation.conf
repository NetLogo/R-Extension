extensionName = "r"
markdownTemplate = """
# NetLogo R Extension

The `r` extension comes bundled with NetLogo 6.0 and later.
You can find versions the latest version of the `r` extension using [the NetLogo extension manager](https://ccl.northwestern.edu/netlogo/docs/extension-manager.html).

This extension is currently maintained by the CCL.
Please submit bugs here on GitHub or to our [bug mailing list](mailto:bugs@ccl.northwestern.edu).
We would love to hear your comments or suggestions feedback as well, those can be sent to [our feedback mailing list](mailto:feedback@ccl.northwestern.edu).

## Table of contents

* [Using](#using)
* [Installing](#installing)
* [Primitives](#primitives)
* [Troubleshooting](#troubleshooting)
* [Citation](#citation)
* [Copyright and License](#copyright-and-license)

{{> USING.md}}

{{> INSTALLING.md}}

## Primitives

{{#contents}}{{#prims}}
[`{{name}}`](#{{primitive.extensionName}}{{primitive.name}})
{{/prims}}{{/contents}}

{{#primitives}}
{{> primTemplate}}
{{/primitives}}

{{> TROUBLESHOOTING.md}}

{{> LICENSE.md}}
"""

primTemplate = """
#### `{{name}}`

Usage:

{{#examples}}
<tt>{{primitive.fullName}}{{#args}} <i>{{name}}</i>{{/args}}</tt>

{{/examples}}

{{{description}}}
"""

filesToIncludeInManual = [ "USING.md", "INSTALLING.md", "primitives", "TROUBLESHOOTING.md", "LICENSE.md" ]

primitives = [
  {
    name: clear,
    type: command,
    description: """
Clears the R-Workspace. All variables in R will be deleted. It evaluates the R command
`rm(list=ls())` and `rm(list=ls(nl.env))`.
This deletes variables created in global as well as local environment
(see [R Environments](#environments-in-the-r-extension) for details about environments).
It's always a good idea to add this command to your setup procedure under your "clear-all" call.

```NetLogo
;; clear the R workspace
r:clear
```
"""
  },
  {
    name: clearLocal,
    type: command,
    description: """
It clears the local R environment, which is used by the extension. All variables which have
been created in the local environment will be deleted. It evaluates the R command
`rm(list=ls(nl.env))`.
See [R Environments](#environments-in-the-r-extension) for details about environments.
See [`r:clear`](#rclear) for deleting all variables, i.e. the globals as well.

```NetLogo
;; delete the local variables
r:clearLocal
```
"""
  },
  {
    name: eval,
    type: command,
    arguments: [ { type: string, name: "R-command" } ],
    description: """
It evaluates the submitted R command. The R command shouldn't return a value.

```NetLogo
;; creates a new vector in R with a sequence from 1 to 10
r:eval "x <- seq(1,10)"
show r:get "x"
```
"""
  },
  {
    name: "__evaldirect",
    type: command,
    arguments: [ { type: string, name: "R-command" } ],
    description: """
Evaluates the submitted R command in the global environment (not in the local environment like `r:eval` does) and
without a check (not using try-function internally).
This can be necessary for some R packages, like *gglopt2*.
Please note, that you can produce name clashes when creating new variables using this primitive.
The variable will be created into the global environment and will not overwrite variable with the same name that have been created into the local environment.
If you request a variable with `r:get` it will search in the local environment first.
Therefore, if there are variables with the same name in the local and the global environment, it will report the variable from the local environment and not the variable created via `r:__evaldirect`.
If there is only a variable with the requested name in the global environment, everything will be fine - `r:get` will report the value of this variable.
If you want to remove a variable created via `r:__evaldirect`, i.e. in the global environment, call `r:eval "rm(myvar, envir=.GlobalEnv)"`, replace myvar by the name of your variable.
The R command shouldn't return a value.
This primitive is experimental.

```NetLogo
;; creates a new vector in R with a sequence from 1 to 10
r:__evaldirect "x <- seq(1,10)"
show r:get "x"
```
"""
  },
  {
    name: gc,
    type: command,
    description: """
Calls the garbage collector of Java (i.e. the R-Extension) and R.
Call this primitive after removing an R variable to free the memory.

```NetLogo
;; create a variable
r:eval "x <- 1:10"
;; remove the variable
r:eval "rm(x)"
;; call the garbage collector
r:gc
```
"""
  },
  {
    name: get,
    type: reporter,
    arguments: [ { type: string, name: R-command } ],
    returns: anything,
    description: """
Reports the return value of the submitted R command. Return type could be a String,
Number, Boolean, NetLogo List or a NetLogo List of Lists.

R lists will be converted into a NetLogo List. If the R list itself contains further lists,
it will be converted into a NetLogo List with nested NetLogo lists. Lists containing values
of different data types are also supported (e.g. mixed Strings, Numbers and
Booleans/Logicals).

Data.frames will be converted into a NetLogo List with nested List for each column, but the
column names will be lost (same for named R lists).

R matrices can be received, but they are converted into one NetLogo list.
NULL and NA values are not converted and will throw an error, because NetLogo has no
corresponding value.

```NetLogo
;; returns a list with 10 variables
show r:get "rnorm(10)"
```
"""
  },
  {
    name: interactiveShell,
    type: command,
    description: """
Opens a window with two textareas. The upper one is the R output stream and in the lower one
you can type R commands. This is the access to the underlaying R session. You can type
multi-line commands. To submit commands press Ctrl+Enter. With "PageUp" and "PageDown" in
the input area you can browse through the histroy of submitted commands. With
right-mouseclick context menu, you can save and load an RHistory (interchangeable with R
terminal and other R GUIs).

Please note, that the Interactive Shell works on the global environment, while commands
submitted from NetLogo lives in an local environment. A reference to this local environment
is automatically added to the global environment (named `nl.env`, please do not delete this
variable. With a call of [`r:clear`](#rclear) you can restore it but this will
empty your workspace). You can use this to have access to variables which you have created
from NetLogo by `get("<variable name>",nl.env)`. To copy for example an variable
with the name `var1` from the local environment to the global environment, type `var <-
get("var",nl.env)`. See section [R Environments](#environments-in-the-r-extension) for details.
If you just want to see the contents of a variable which lives in the local environment, you
could submit your command, for example in the NetLogo Command Center, and the result will
be shown in the output area of the Interactive Shell. For example:

```NetLogo
r:put "test" (list world-width world-height)
r:interactiveShell
r:eval "print(test)"
r:eval "str(test)"
```

Variables which have been created in the Interactive Shell are available from NetLogo, even
if they are created in the global environment. But if there is a variable with the same name
in the local environment, you will get this variable in NetLogo instead the one from the
global environment.

If you want to execute plot commands from the Interactive Shell you should activate the
integrated JavaGD plot device via [`r:setPlotDevice`](#rsetplotdevice) first.

```NetLogo
;; opens Interactive Shell
r:interactiveShell
```
"""
  },
  {
    name: put,
    type: command,
    arguments: [ { name: "name", type: string }, { name: value, type: anything } ],
    description: """
Creates a new variable in R with the name *name*.
The value can be a String, Number, Boolean or List.

NetLogo Lists are converted to R vectors, if all entries are of the same data type.
If a NetLogo list contains different data types (mixed Strings, Numbers of Booleans), it will be converted into an R list.
If a NetLogo List contains other/nested NetLogo Lists it will be converted into an R list and the nested Lists are handled by the same rule
(Vectors if all items are of the same data type, ...).

```NetLogo
;; creates an R variable "testvar" with the size of turtle 0
r:put "testvar" [size] of turtle 0
show r:get "testvar"
```
"""
  },
  {
    name: putagent,
    type: command,
    arguments: [ { name: name, type: string }, { type: agent }, { name: variables, type: "repeatable string" } ],
    alternateArguments: [ { name: name, type: string }, { type: agentset }, { name: variables, type: "repeatable string" } ],
    description: """
Creates a new named list in R with the name *name*.
The argument `variables` is any number of strings which list and variable(s) of the agent|agentset.
Names of the elements of the R list will be the same as the names of the agent variables.
Turtles will be assigned in ascending order of their who-variable.
Patches will be assigned in lines from upper left to lower right.
Since the arguments of this primitive are repeatable, don't forget the parentheses around the statement.

```NetLogo
;; creates an R-list "agentlist1" with the size and the id of turtles, don't forget the parentheses
(r:putagent "agentlist1" turtles "size" "who")
show r:get "agentlist1$who"
;; creates an R-list "agentlist2" with the pcolor, pxcor and pycor of patches
(r:putagent "agentlist2" patches "pcolor" "pxcor" "pycor")
show r:get "agentlist2$pcolor"
```
"""
  },
  {
    name: putagentdf,
    type: command,
    arguments: [ { name: name, type: string }, { type: agent }, { name: variables, type: "repeatable string" } ],
    alternateArguments: [ { name: name, type: string }, { type: agentset }, { name: variables, type: "repeatable string" } ],
    description: """
Same as [`r:putagent`](#rputagent) but creates an R data.frame instead a list.
Please read the notes about [`data.frames`](#dataframe-with-vector-in-cells) if one of your agent variables contains NetLogo Lists.

```NetLogo
;; creates an R-list "agentlist2" with the pcolor, pxcor and pycor of patches, don't forget the parentheses
(r:putagentdf "df1" patches "pcolor" "pxcor" "pycor")
show r:get "class(df1)"
```
"""
  },
  {
    name: putdataframe,
    type: command,
    arguments: [ { name: name, type: string }, { name: varname, type: string }, { name: value, type: list } ],
    alternateArguments: [ { name: name, type: string }, { name: varname, type: string }, { name: value, type: list }, { name: "varname2 value2 ...", type: "repeatable string anything" } ],
    description: """
Same as [`r:putnamedlist`](#rputnamedlist) but creates an R data.frame instead of a list.
If you send more than one list to NetLogo and the lists are of different length, the smaller ones will be filled with NA values.

If you send nested LogoLists (e.g. of type: [ [ ] [ ] ... ]) to one column please read the
notes about [data frames with vectors in cells](#dataframe-with-vector-in-cells).

```NetLogo
;; creates an R-list "agentlist2" with the pcolor, pxcor and pycor of patches, don't forget the parentheses
(r:putdataframe "df1" "v1" [12 13 14 15 16] "v2" ["foo1" "foo2" "foo3" "foo4" "foo5"] "v3" [1.1 2.2 3.3 4.4 5.5])
show r:get "df1$v3"
```
"""
  },
  {
    name: putlist,
    type: command,
    arguments: [ { name: name, type: string }, { name: value, type: "repeatable anything" } ],
    description: """
Creates a new list in R with the name <i>name</i>. <i>Variable</i> is repeatable and can
be a Number, Boolean or List. Each "Variable" will get the name of its position (1, 2,
3,...). Since the arguments of this primitive are repeatable, don't forget the parentheses
around the statement.

```NetLogo
;; creates an R-list "list1", don't forget the parentheses
(r:putlist "list1" 25.5 [25 43 32 53] "testvalue"  [44.3 32.32 321.2 4.2])
show r:get "class(list1)"
show r:get "list1[[1]]"
show r:get "list1$'0'"
show r:get "list1[[2]]"
```
"""
  },
  {
    name: putnamedlist,
    type: command,
    arguments: [ { name: name, type: string }, { name: varname, type: string }, { name: value, type: list } ],
    alternateArguments: [ { name: name, type: string }, { name: varname, type: string }, { name: value, type: list }, { name: "varname2 value2 ...", type: "repeatable string anything" } ],
    description: """
Creates a new named list in R with the name `name`.
Variable names and values follow in alternating sequence and may be repeated as many times as desired.
Values can be a Number, Boolean or List.
Each *value* will get the name *varname*.
Since the arguments of this primitive are repeatable, don't forget to put the statement into parentheses.

```NetLogo
;; creates an R-list "list1" , don't forget the parentheses
(r:putnamedlist "list1" "v1" 25.5 "v2" [25 43 32 53] "v3" "testvalue" "v4" [44.3 32.32 321.2 4.2])
show r:get "class(list1)"
show r:get "list1[[1]]"
show r:get "list1$v1"
```
"""
  },
  {
    name: setPlotDevice,
    type: command,
    description: """
To open an R plot in a window you can use the JavaGD plot device. With this primitive you
can activate this device and all following calls of R plots will be printed with this
device.

To use this device, you have to install the JavaGD package in R. Open an R terminal or the
InteractiveShell (see [`r:interactiveShell`](#rinteractiveshell)) and type `install.packages("JavaGD")`.

With this plot window you can save the plot to an file of different graphic type and you can
copy the plot to the clipboard. Please note, that on Linux OS it can be necessary to allow
to add images to the clipboard (e.g. in KDE you have to configure KLIPPER to allow images).
The resolution for raster images depends on the size of the plot window. If you need high
resolution maximaze the window (and don't use jpeg, because the driver is bad) or better use
a vector image format.

Please see the [notes about plotting](#plotting) for other details.

```NetLogo
;; activate the JavaGD plot device
r:setPlotDevice
```
"""
  },
  {
    name: stop,
    type: command,
    description: """
Stops the R engine.
This is needed (only) if NetLogo is running in headless mode, for example when running BehaviorSpace experiments from the command line with something like this:

```
java -cp NetLogo.jar org.nlogo.headless.Main --model mymodel.nlogo --experiment exp1 --table outtab1.csv
```

 Should be the last call in headless simulation. See usage notes above for details.

```NetLogo
r:stop
```
"""
  }
]
